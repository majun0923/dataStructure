class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        if (nums.length == 1) return nums;
        if (nums.length == 0) return null;
        //
        Map<Integer,Integer> map = new HashMap<>();
        for (int num : nums){
            map.put(num, map.getOrDefault(num,0)+1);
        }
        Iterator<Map.Entry<Integer, Integer>> entries = map.entrySet().iterator();
        // 新建最大堆
        Queue<Map.Entry<Integer,Integer>> queue = new PriorityQueue<>((v1,v2) -> v2.getValue() - v1.getValue());
        while (entries.hasNext()){
            queue.offer(entries.next());
        }
        //
        int[] ans = new int[k];
        for (int i=0; i<k; i++){
            Map.Entry<Integer,Integer> currentEntry = queue.poll();
            ans[i] = currentEntry.getKey();
        }

        return ans;

    }
}